#CHROMOSOMES = list(range(1,31))
DATA =['139977.170112.2326.GGPHDV3', '227234.170112.325.GGPF250', '26504.170112.3126.GGPLDV3', '30105.170112.2500.GGPLDV4', '58336.170112.315.SNP50A', '58336.170112.335.SNP50B', '58336.170112.3399.SNP50C', '76999.170112.3498.GGP90KT','777962.170127.483.HD' ]


rule targ:
	input:
		jag = expand("eagle_phased_assays/{sample}.chr{chr}.phased.haps.gz",sample = DATA,  chr = list(range(1,30)))
#		jag = expand("eagle_chrsplit/{sample}.chr{chr}.bed", sample = DATA, chr = list(range(1,30)))
rule split_chromosomes:
        input:
                bed = expand( "correct_sex/{assay}.bed", assay = DATA),
                bim = expand("correct_sex/{assay}.bim", assay = DATA),
                fam = expand("correct_sex/{assay}.fam", assay = DATA),
                log = expand("correct_sex/{assay}.log", assay = DATA)
        params:
                inprefix = "correct_sex/{sample}",
                oprefix = "eagle_chrsplit/{sample}.chr{chr}",
                chr = "{chr}"
        benchmark:
                "filter_benchmarks/eagle_chrsplit/{sample}.chr{chr}.txt"
        log:
                "snake_logs/eagle_split_chromosomes/{sample}.chr{chr}.log"
        output:
                bed = "eagle_chrsplit/{sample}.chr{chr}.bed",
                bim = "eagle_chrsplit/{sample}.chr{chr}.bim",
                fam = "eagle_chrsplit/{sample}.chr{chr}.fam",
                log = "eagle_chrsplit/{sample}.chr{chr}.log"
        shell:
                "(plink --bfile {params.inprefix}  --keep-allele-order --chr {params.chr} --make-bed  --nonfounders --cow --out {params.oprefix})> {log}"

rule run_eagle_single_chrom:
	input:
		bed = "eagle_chrsplit/{sample}.chr{chr}.bed",
                bim = "eagle_chrsplit/{sample}.chr{chr}.bim",
                fam = "eagle_chrsplit/{sample}.chr{chr}.fam",
                log = "eagle_chrsplit/{sample}.chr{chr}.log"
	params:
		inprefix = "eagle_chrsplit/{sample}.chr{chr}",
		oprefix = "eagle_phased_assays/{sample}.chr{chr}.phased"
	benchmark:
		"filter_benchmarks/eagle_phased_assays/{sample}.chr{chr}.benchmark.txt"
	threads: 8
	log:
		"snake_logs/eagle_phased_assays/{sample}.chr{chr}.log"
	output:
		sample = "eagle_phased_assays/{sample}.chr{chr}.phased.sample",
		haps = "eagle_phased_assays/{sample}.chr{chr}.phased.haps.gz"
	shell:
		"(eagle --bfile={params.inprefix} --geneticMapFile=USE_BIM --maxMissingPerSnp 1 --maxMissingPerIndiv 1 --numThreads 8 --outPrefix {params.oprefix}) > {log}"




rule run_eagle:
	input:
		bed = "chrsplit/170112_merged.chr{chr}.bed",
		bim = "chrsplit/170112_merged.chr{chr}.bim",
		fam = "chrsplit/170112_merged.chr{chr}.fam",
		log = "chrsplit/170112_merged.chr{chr}.log",
	params:
		inprefix ="chrsplit/170112_merged.chr{chr}",
		oprefix = "eagle_phased/170112_merged.chr{chr}"
	benchmark:
		"filter_benchmarks/eagle_phased/170112_merged.chr{chr}.benchmark.txt"
	log:
		"snake_logs/eagle_phased/170112_merged.chr{chr}.log"
	threads: 8
	output:
		sample = "eagle_phased/170112_merged.chr{chr}.sample",
		haps = "eagle_phased/170112_merged.chr{chr}.haps.gz"
	shell:
		"(eagle --bfile={params.inprefix} --geneticMapFile=USE_BIM --maxMissingPerSnp 1 --maxMissingPerIndiv 1 --numThreads 8 --outPrefix {params.oprefix}) > {log}"



rule eagle_to_vcf:
	input:
		haps = "eagle_phased/170112_merged.chr{chr}.haps",
		sample = "eagle_phased/170112_merged.chr{chr}.sample"
	params:
		inprefix = "eagle_phased/170112_merged.chr{chr}",
		oprefix = "eagle_vcfs/170112_merged.chr{chr}"
	benchmark:
		"filter_benchmarks/eagle_to_vcf/170112_merged.chr{chr}.benchmark.txt"
	log:
		"snake_logs/eagle_to_vcf/170112_merged.chr{chr}.log"
	output:
		vcf = "eagle_vcfs/170112_merged.chr{chr}.phased.vcf",
		log = "eagle_vcfs/170112_merged.chr{chr}.log"
	shell:
		"(shapeit -convert --input-haps {params.inprefix} --output-log {output.log} --output-vcf {output.vcf}) > {log}"




rule vcf_to_plink:
	input:
		vcf = "eagle_vcfs/170112_merged.chr{chr}.phased.vcf"
	params:
		oprefix = "eagle_plink/170112_merged.chr{chr}.phased"
	benchmark:
		"filter_benchmarks/vcf_to_plink/170112_merged.chr{chr}.benchmark.txt"
	log:
		"snake_logs/vcf_to_plink/170112_merged.chr{chr}.phased.log"
	output:
		bed = "eagle_plink/170112_merged.chr{chr}.phased.bed",
		bim = "eagle_plink/170112_merged.chr{chr}.phased.bim",
		fam = "eagle_plink/170112_merged.chr{chr}.phased.fam",
		log = "eagle_plink/170112_merged.chr{chr}.phased.log"
	shell:
		"plink --vcf {input.vcf} --cow --keep-allele-order --make-bed --out {params.oprefix}"

rule merge_eagle_plinks:
	input:
		bed = "eagle_plink/170112_merged.chr{chr}.phased.bed",
		bim = "eagle_plink/170112_merged.chr{chr}.phased.bim",
		fam = "eagle_plink/170112_merged.chr{chr}.phased.fam",
		log = "eagle_plink/170112_merged.chr{chr}.phased.log"
	params:
		oprefix = "eagle_plink/170112_merged.phased"
	output:
		bed = "eagle_plink_merged/170112_merged.phased.bed",
		bim = "eagle_plink_merged/170112_merged.phased.bed",
		fam = "eagle_plink_merged/170112_merged.phased.bed",
		log = "eagle_plink_merged/170112_merged.phased.bed"	

	shell:
		"python eagle_plink_merging.py correct_sex/allfiles.txt; plink --merge-list correct_sex/allfiles.txt  --cow --keep-allele-order --make-bed --out {params.oprefix}"
