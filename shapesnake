rule targ:
	input:
		haps = expand("shapetest3/merged.chr{chr}.phased.haps",chr=list(range(2,31))),

rule run_shapeit:
	input:
		bed="chrsplit/merged.chr{chr}.bed",
		bim="chrsplit/merged.chr{chr}.bim",
		fam="chrsplit/merged.chr{chr}.fam"
	output:
		sample = "shapetest3/merged.chr{chr}.phased.sample",
		haps = "shapetest3/merged.chr{chr}.phased.haps",
		log = "shapetest3/logs/merged.chr{chr}.log"
	log:
		"logs/shaperuns/{chr}.log"
	benchmark:
		"benchmarks/shapeit/shapeit.{chr}.benchmark.txt"
	shell:
                "shapeit --input-bed {input.bed} {input.bim} {input.fam}  --duohmm --output-max {output.haps} {output.sample} --output {output.log}"


rule make_vcf:
	input:
		haps="shapetest3/merged.chr{chr}.phased.haps",
	output:
		vcf="shapevcf/merged.chr{chr}.phased.vcf",
		log="shapevcf/logs/merged.chr{chr}.log"
	log:
                "logs/shapevcf/logs/snake.{chr}.log"
	benchmark:
                "benchmarks/shapevcf/shapevcf.{chr}.benchmark.txt"
	params:
		haps="shapetest3/merged.chr{chr}.phased"
	shell:
		"shapeit -convert --input-haps {params.haps} --output-log {output.log} --output-vcf {output.vcf}"

rule vcf_to_fimpute:
	input:
		vcf="shapevcf/merged.chr{chr}.phased.vcf",
	params:
		colnum='2'
	log:
                "logs/vcf2fimpute/{chr}.log"
	benchmark:
                "benchmarks/vcf2fimpute/vcf2impute.{chr}.benchmark.txt"
	output:
		outname="fimpute_chip/merged.chr{chr}.fimpute"
	shell:
		"python ./bin/vcftoFimpute.py {input.vcf} {output.outname} {params}"

#replace with a file of known ranges
from itertools import tee
def parwise(iterable):
	a,b = tee(iterable)
	next(b, None)
	return zip(a,b)

def chunks(end):
	return [str(i[0]+1)+ ' ' + str(i[1]) for i in parwise(range(0,end,5000000))]
	
rangedict = {'25': chunks(43879707)}

def chrchunker(WC):
	return rangedict[WC.chr][int(WC.chunk)]
	
	
#will need to get the chunker to create variable chunks based on the size of the file
rule run_impute2:
	input:
		haps="shapetest3/merged.chr{chr}.phased.haps",
		maps="maps/impmap.chr{chr}.map"
	params:
		chunk= chrchunker
	log:
		"logs/impruns/{chr}.{chunk}.log"
	benchmark:
		"benchmarks/impruns/{chr}.{chunk}.log"
	output:
		out= "imputetest/merged.chr{chr}.{chunk}.imputed"
	shell:
		"impute2 -use_prephased_g -known_haps_g {input.haps} -m {input.maps} -int {params.chunk} -Ne 100 -o {output.out}"

